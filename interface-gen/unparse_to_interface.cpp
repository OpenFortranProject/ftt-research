/* unparse_to_interface.cpp
 *
 * Code to unparse Sage/Fortran nodes to Fortran interface files
 *
 */

#include "unparse_to_interface.h"
#include <stdio.h>

using namespace std;

FILE * unparse_to_filename_open (const char * filename)
{
   FILE * fd;

   fd = fopen(filename, "w");

   return fd;
}

int  unparse_to_filename_close (FILE * fd)
{
   return fclose(fd);
}

int  unparseProcHdrStmt        (FILE * fd, const char * name)
{
   // unparse subroutine-stmt
   //
   fprintf(fd, "Interface\n");
   fprintf(fd, "!=====================================================================\n");
   fprintf(fd, "!        %s\n", name);
   fprintf(fd, "!\n");
   fprintf(fd, "! Fortran interface for %s procedure.\n", name);
   fprintf(fd, "!\n");
   fprintf(fd, "! WARNING this file is automatically generated.  Do NOT modigy.\n");
   fprintf(fd, "!=====================================================================\n");
   fprintf(fd, "Subroutine %s(%s) &\n", name, unparse_arg_list(fd));
   fprintf(fd, "Bind (C,name=\"%s\")\n", name);
   fprintf(fd, "Use, intrinsic :: ISO_C_BINDING\n");
   fprintf(fd, "Implicit None\n");
   fprintf(fd, "!--------------------------\n");
   fprintf(fd, "\n");

   // call unparseFuncDefnStmt directly
   //
   unparseFuncDefnStmt(fd, name);

   // unparse end-subroutine-stmt
   //
   fprintf(fd, "\n");
   fprintf(fd, "End Subroutine %s\n", name);

   fprintf(fd, "\n");
   fprintf(fd, "End Interface\n");
   fprintf(fd, "End\n");

   return 0;
}

int  unparseFuncDefnStmt        (FILE * fd, const char * name)
{
   int err;

   /* unparse specification-part
    */
   err = unparse_specification_part(fd, name);

   /* unparse execution-part
    */
   err = unparse_execution_part(fd, name);

   return err;
}

int  unparse_specification_part (FILE * fd, const char * name)
{
   /* for now unparse variable decl list externally
    */
   unparse_var_decl_statements(fd);

   return 0;
}

int  unparse_execution_part (FILE * fd, const char * name)
{
   return 0;
}

int  unparseVarDeclStmt          (FILE * fd, const char * name,    const char * type,
                                             const char * intent,  const char * arrayDims)
{
   fprintf(fd, "%s", type);

   if (intent != NULL) {
      fprintf(fd, ", intent(%s)", intent);
   }

   fprintf(fd, " :: %s", name);

   if (arrayDims != NULL) {
      fprintf(fd, "%s", arrayDims);
   }

   fprintf(fd, "\n");

   return 0;
}

int unparsePtrAssocStmt (FILE * fd,  const char * name,
                         int index,  const char * arrayDims)
{

   fprintf(fd, "Call C_F_POINTER(mxGetPr(prhs(%d)), %s", index, name);

   if (arrayDims != NULL) {
      fprintf(fd, ", %s", arrayDims);
   }

   fprintf(fd, ")\n");

   return 0;
}

